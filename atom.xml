<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gaslyliu.github.io</id>
    <title>Gasly.Liu</title>
    <updated>2024-08-19T14:51:48.093Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gaslyliu.github.io"/>
    <link rel="self" href="https://gaslyliu.github.io/atom.xml"/>
    <logo>https://gaslyliu.github.io/images/avatar.png</logo>
    <icon>https://gaslyliu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, Gasly.Liu</rights>
    <entry>
        <title type="html"><![CDATA[How to use pylint?]]></title>
        <id>https://gaslyliu.github.io/post/how-to-use-pylint-to-format-your-python-code/</id>
        <link href="https://gaslyliu.github.io/post/how-to-use-pylint-to-format-your-python-code/">
        </link>
        <updated>2024-08-18T16:35:19.000Z</updated>
        <content type="html"><![CDATA[<p>This article is all about how to use pylint to format your python⌨️</p>
<h2 id="1-what-is-pylint">1. ❔What is pylint</h2>
<p>Pylint 是一个广泛使用的 Python 静态代码分析工具，用于检查代码质量、识别潜在的错误和确保代码遵循良好的编程规范。它可以帮助开发者维护一致的代码风格，提高代码的可读性和可维护性。</p>
<p>Pylint 一般被用作代码review前，用作项目成员自测或保证各成员编码风格统一的检视工具。</p>
<p>日常运用时，通常会使用习惯的python formatter用作编码过程中\的规范工(Autopep8/Black/isort/etc)<br>
详细可以查看这篇BLOG,归纳的比较全--<a href="https://www.kevinpeters.net/auto-formatters-for-python">Auto formatters for Python</a></p>
<h2 id="2-how-to-install-or-use-pylint">2. How to install or use pylint</h2>
<h3 id="console-style">Console Style</h3>
<ul>
<li>
<p>切换至你的python环境</p>
<pre><code class="language-bash">pip install pylint
</code></pre>
</li>
<li>
<p>命令行使用pylint<br>
检查文件</p>
<pre><code class="language-bash">## 单个文件
pylint your_file.py
## 多个文件
pylint file1.py file2.py
</code></pre>
<p>或者检查整个项目目录</p>
<pre><code class="language-bash">pylint your_project
</code></pre>
</li>
<li>
<p>输出检查报告</p>
<pre><code>## 使用重定向符号 &gt; 保存输出  
pylint your_script.py &gt; pylint_output.txt
## 使用 --output 选项
pylint your_script.py --output=pylint_output.txt
</code></pre>
</li>
</ul>
<p>⭕ 在终端中使用pylint比较灵活，但是并不具备代码定向功能，所以还是在IDE中集成配置一下吧。</p>
<h3 id="vscode-style">Vscode Style</h3>
<ul>
<li>
<p>安装pylint扩展<br>
<img src="https://gaslyliu.github.io/post-images/1723990372568.png" alt="" loading="lazy"></p>
</li>
<li>
<p>在终端的可以看到所有的workspace中所有的代码问题</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://gaslyliu.github.io/post-images/1723990620450.jpg" alt="" loading="lazy"></figure>
<h3 id="pycharm-style">Pycharm Style</h3>
<ul>
<li>
<ol>
<li>File &gt; Settings&gt; Tools &gt; External Tool，点击 + 号添加<br>
<img src="https://gaslyliu.github.io/post-images/1724078625245.jpg" alt="" loading="lazy"></li>
</ol>
</li>
<li>
<ol start="2">
<li>添加如下配置：<br>
Program中需要添加pylint.exe路径，若不知道安装路径，可在工作环境中执行</li>
</ol>
<pre><code class="language-bash">where pylint
</code></pre>
<img src="https://gaslyliu.github.io/post-images/1724078786849.jpg" alt="" loading="lazy"></li>
<li>
<ol start="3">
<li>选中文件右键，在External Tools中执行pylint 即可在终端中查看输出<br>
<img src="https://gaslyliu.github.io/post-images/1724079091611.jpg" alt="" loading="lazy"></li>
</ol>
</li>
</ul>
<h2 id="3-️how-to-configure-pylint">3. ⚙️How to configure pylint</h2>
<p>Pylint允许你通过配置文件来自定义代码检查的规则和行为。为了统一代码风格和标准，建议项目内成员使用统一配置完成pylint设置。</p>
<ul>
<li>
<p>创建 .pylintrc 配置文件<br>
在终端执行一下命令，生成默认配置文件。生成路径会在终端路径下。</p>
<pre><code class="language-bash">pylint --generate-rcfile &gt; .pylintrc
</code></pre>
<p>当然你也可以指定生成路径</p>
<pre><code class="language-bash">pylint --generate-rcfile &gt; /path/to/your/project/.pylintrc
</code></pre>
<p>你可以在配置文件中修改，达到自定义pylint行为的目的。</p>
</li>
<li>
<p>全局 .pylintrc 配置</p>
<ul>
<li>
<p>方法一: 放置 .pylintrc 文件到用户主目录<br>
如果你想对所有 Python 项目使用相同的 .pylintrc 文件，可以将其放在用户目录下的 ~/.pylintrc 文件中（Unix 系统）或 C:\Users\YourUsername.pylintrc 文件中（Windows 系统）。<br>
Pylint 在运行时会自动查找这些位置的配置文件。</p>
</li>
<li>
<p>方法二: 使用环境变量 PYLINTRC<br>
Windows:<br>
打开“系统属性” &gt; “高级” &gt; “环境变量”。<br>
在用户变量或系统变量中，点击“新建”，添加一个新的环境变量：</p>
<ul>
<li>变量名: PYLINTRC</li>
<li>变量值: .pylintrc 文件的路径，例如 C:\Users&lt;你的用户名&gt;.pylintrc</li>
</ul>
</li>
<li>
<p>检查默认配置文件是否生效</p>
<pre><code class="language-bash">pylint -v
</code></pre>
<p>输出当前使用配置文件路径</p>
</li>
</ul>
</li>
<li>
<p>使用指定的 .pylintrc 文件<br>
使用 --rcfile 参数，执行pylint时定向配置文件路径</p>
<pre><code class="language-bash">pylint --rcfile=/path/.pylintrc your_python_file.py
</code></pre>
</li>
<li>
<p>python行代码内配置<br>
如果你想针对代码中的某一行，绕过pylint中的检查项，可以在该行后添加注释。</p>
<pre><code class="language-python">import dlib  # pylint:disable=unused-import
```吗， 
</code></pre>
</li>
</ul>
<h2 id="4-how-to-use-the-output-of-pylint">4. 📖How to use the output of pylint</h2>
<ul>
<li>在IDE中配置完成后可以在PROBLEMS视图中查看当前文件中所有的问题，包括问题详情、违反的规则编号、相关规则信息，以及问题位置.<br>
<img src="https://gaslyliu.github.io/post-images/1723997373165.jpg" alt="" loading="lazy"></li>
<li>如果是使用终端pylint的话，在最后一行还有量化的代码分数（虽然不太能有用于质量批判，但是挺有意思的，算是修改错误的量化反馈吧）<br>
<img src="https://gaslyliu.github.io/post-images/1723997390442.jpg" alt="" loading="lazy"></li>
</ul>
<h2 id="5-attachment">5. Attachment</h2>
<p><a href="https://pylint.readthedocs.io/en/stable/"><span style="color: #FF5733;">official website</span></a><br>
<a href="https://pylint.readthedocs.io/en/stable/user_guide/checkers/features.html"><span style="color: #FF5733;">check features</span></a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to format your PYTHON code?]]></title>
        <id>https://gaslyliu.github.io/post/how-to-format-your-python-code/</id>
        <link href="https://gaslyliu.github.io/post/how-to-format-your-python-code/">
        </link>
        <updated>2024-07-28T15:51:01.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<ol>
<li>如何使用pylint</li>
</ol>
<!-- more -->
<ol start="2">
<li>python代码规范</li>
</ol>
<p>谷歌规范：</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tips for python]]></title>
        <id>https://gaslyliu.github.io/post/tips-for-python/</id>
        <link href="https://gaslyliu.github.io/post/tips-for-python/">
        </link>
        <updated>2024-02-20T15:55:33.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tips for GIT]]></title>
        <id>https://gaslyliu.github.io/post/tips-for-using-git/</id>
        <link href="https://gaslyliu.github.io/post/tips-for-using-git/">
        </link>
        <updated>2024-02-17T15:13:46.000Z</updated>
        <content type="html"><![CDATA[<p>If you have uncommitted changes and you want to discard them, you can use the following command to discard all changes locally:</p>
<pre><code>git reset --hard HEAD
</code></pre>
<p>This will return your working directory and staging area to the state of the<br>
last commit. Then you can switch to the branch to pull and pull it.</p>
<pre><code>git checkout feature-branch
git pull origin feature-branch
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to use Github page and Gridea to set up your own website?]]></title>
        <id>https://gaslyliu.github.io/post/how-to-use-github-page-and-gridea-to-set-up-your-own-website/</id>
        <link href="https://gaslyliu.github.io/post/how-to-use-github-page-and-gridea-to-set-up-your-own-website/">
        </link>
        <updated>2024-02-06T06:01:39.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blog Website Release Note]]></title>
        <id>https://gaslyliu.github.io/post/release_note/</id>
        <link href="https://gaslyliu.github.io/post/release_note/">
        </link>
        <updated>2023-05-17T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://gaslyliu.github.io/post-images/1685123521249.png" alt="" loading="lazy"></figure>
<h3 id="header-name被遮挡">header name被遮挡</h3>
<p>修复 header name被menu遮挡的问题，menu的属性更改为后置</p>
<h3 id="valine-error-code504">Valine error code504</h3>
<p><code>Code 504: The app is archived, please restore in console before use.</code><br>
突然发现网站评论框下面有一行上面的报错信息，是valine太久没有使用需要重新激活,需要范围leancloud控制台重新恢复一下账号<br>
LeanCloud 控制台-<a href="https://www.leancloud.cn">https://www.leancloud.cn</a></p>
]]></content>
    </entry>
</feed>